pc.script.createLoadingScreen((function(t){var o,a;o=["body {","    background: linear-gradient(180deg, #f0f4f8, #d9dfe6);","    overflow: hidden;","}","","#application-splash-wrapper {","    position: absolute;","    top: 0;","    left: 0;","    height: 100%;","    width: 100%;","    display: flex;","    justify-content: center;","    align-items: center;","    background: linear-gradient(270deg, #ffffff, #d9e4ec, #b0c4de, #d9dfe6);","    background-size: 400% 400%;","    animation: backgroundSwell 15s ease infinite;","}","","#application-splash {","    display: flex;","    flex-direction: column;","    align-items: center;","}","","#application-splash img {","    width: 256px;","    margin-bottom: 10px;","}","","#progress-bar-container {","    width: 80%;","    height: 6px;","    border-radius: 10px;","    background-color: #e0e0e0;","    overflow: hidden;","}","","#progress-bar {","    width: 0%;","    height: 100%;","    border-radius: 10px;","    background: linear-gradient(90deg, #00b3b3, #007777);","}","","@media (max-width: 480px) {","    #application-splash img {","        width: 150px;","    }","}","","/* Gradient Swell Animation */","@keyframes backgroundSwell {","    0% {","        background-position: 0% 50%;","    }","    30% {","        background-position: 100% 50%;","    }","    50% {","        background-position: 0% 50%;","    }","}","","/* Dotted Graphics */",".dot {","    position: absolute;","    width: 5px;","    height: 5px;","    background-color: #004c4c;","    border-radius: 50%;","    opacity: 0.7;","    animation: dotMove 5s infinite alternate;","}","","@keyframes dotMove {","    0% {","        transform: translate(0, 0);","    }","    100% {","        transform: translate(50px, 25px);","    }","}","",".dot1 { left: 10%; top: 15%; animation-duration: 5s; }",".dot2 { left: 20%; top: 30%; animation-duration: 6s; }",".dot3 { left: 30%; top: 60%; animation-duration: 7s; }",".dot4 { left: 40%; top: 20%; animation-duration: 8s; }",".dot5 { left: 50%; top: 70%; animation-duration: 6s; }",".dot6 { left: 60%; top: 40%; animation-duration: 9s; }",".dot7 { left: 70%; top: 25%; animation-duration: 10s; }",".dot8 { left: 80%; top: 50%; animation-duration: 6s; }",".dot9 { left: 90%; top: 15%; animation-duration: 8s; }",".dot10 { left: 15%; top: 50%; animation-duration: 9s; }",".dot11 { left: 25%; top: 70%; animation-duration: 10s; }",".dot12 { left: 35%; top: 25%; animation-duration: 7s; }",".dot13 { left: 45%; top: 80%; animation-duration: 5s; }",".dot14 { left: 55%; top: 50%; animation-duration: 8s; }",".dot15 { left: 65%; top: 10%; animation-duration: 6s; }",".dot16 { left: 75%; top: 40%; animation-duration: 9s; }",".dot17 { left: 85%; top: 60%; animation-duration: 8s; }",".dot18 { left: 5%; top: 20%; animation-duration: 7s; }",".dot19 { left: 95%; top: 30%; animation-duration: 5s; }",".dot20 { left: 20%; top: 10%; animation-duration: 8s; }",".dot21 { left: 30%; top: 80%; animation-duration: 6s; }",".dot22 { left: 50%; top: 15%; animation-duration: 9s; }",".dot23 { left: 60%; top: 65%; animation-duration: 7s; }",".dot24 { left: 75%; top: 30%; animation-duration: 10s; }",".dot25 { left: 40%; top: 60%; animation-duration: 8s; }",".dot26 { left: 80%; top: 75%; animation-duration: 9s; }",".dot27 { left: 90%; top: 40%; animation-duration: 10s; }",".dot28 { left: 10%; top: 65%; animation-duration: 7s; }",".dot29 { left: 35%; top: 15%; animation-duration: 5s; }",".dot30 { left: 55%; top: 25%; animation-duration: 8s; }"].join("\n"),(a=document.createElement("style")).type="text/css",a.styleSheet?a.styleSheet.cssText=o:a.appendChild(document.createTextNode(o)),document.head.appendChild(a),function(){var t=document.createElement("div");t.id="application-splash-wrapper",document.body.appendChild(t);var o=document.createElement("div");o.id="application-splash",t.appendChild(o);var a=document.createElement("img");a.src="https://i.imgur.com/iVo4Y8s.png",o.appendChild(a);var n=document.createElement("div");n.id="progress-bar-container",o.appendChild(n);var i=document.createElement("div");i.id="progress-bar",n.appendChild(i);for(var e=1;e<=30;e++){var d=document.createElement("div");d.className="dot dot"+e,t.appendChild(d)}}(),t.on("preload:end",(function(){t.off("preload:progress")})),t.on("preload:progress",(function(t){var o=document.getElementById("progress-bar");o&&(t=Math.min(1,Math.max(0,t)),o.style.width=100*t+"%")})),t.on("start",(function(){var t=document.getElementById("application-splash-wrapper");t.parentElement.removeChild(t)}))}));var Camera=pc.createScript("camera");Camera.attributes.add("testEntity",{type:"entity"}),Camera.prototype.initialize=function(){this.app.mouse.on("mousedown",this.onMouseDown,this)},Camera.prototype.onMouseDown=function(t){this.setRaycast(t)},Camera.prototype.setRaycast=function(t){var e=this.entity.getPosition().clone(),a=this.entity.camera.screenToWorld(t.x,t.y,this.entity.camera.farClip),i=this.app.systems.rigidbody.raycastFirst(e,a);null!=i&&(this.testEntity.setLocalPosition(i.point),this.app.fire("Player:Move",i.point))},Camera.prototype.update=function(t){};var Player=pc.createScript("player");Player.attributes.add("speed",{type:"number",default:.05}),Player.attributes.add("characterEntity",{type:"entity"}),Player.attributes.add("footstepSoundEntity",{type:"entity",title:"Footstep Sound Entity"}),Player.prototype.initialize=function(){this.nextPositon=new pc.Vec3(-10.123,0,19.826),this.app.on("Player:Move",this.setMovePoint,this),this.footstepSoundEntity?(this.footstepSound=this.footstepSoundEntity.sound,this.footstepSound||console.warn("Footstep entity does not have a sound component.")):console.warn("Footstep sound entity not assigned."),this.isMoving=!1,this.footstepPlaying=!1},Player.prototype.setMovePoint=function(t){this.entity.lookAt(t),this.nextPositon.copy(t)},Player.prototype.update=function(t){this.entity.getPosition().clone().sub(this.nextPositon).length()>.1?(this.entity.translateLocal(0,0,-this.speed),this.characterEntity.anim.setFloat("Distance",1),this.isMoving=!0):(this.characterEntity.anim.setFloat("Distance",0),this.isMoving=!1),this.isMoving&&!this.footstepPlaying&&this.footstepSound?(this.footstepSound.play("default"),this.footstepPlaying=!0):!this.isMoving&&this.footstepPlaying&&(this.footstepSound.stop("default"),this.footstepPlaying=!1),this.app.fire("Chase:Position",this.entity.getPosition()),this.app.fire("spotlight:Position",this.entity.getPosition())};var Chase=pc.createScript("chase");Chase.prototype.initialize=function(){this.currentPosition=new pc.Vec3(-10.123,0,19.826),this.nextPosition=new pc.Vec3(0,0,0),this.app.on("Chase:Position",this.setChasePosition,this)},Chase.prototype.setChasePosition=function(t){this.nextPosition=t},Chase.prototype.update=function(t){this.currentPosition=this.currentPosition.lerp(this.currentPosition,this.nextPosition,.065),this.entity.setPosition(this.currentPosition)};var Spotlight=pc.createScript("spotlight");Spotlight.prototype.initialize=function(){this.currentPosition=new pc.Vec3(-10.123,0,19.826),this.nextPosition=new pc.Vec3(0,0,0),this.app.on("spotlight:Position",this.setChasePosition,this)},Spotlight.prototype.setChasePosition=function(t){this.nextPosition=t},Spotlight.prototype.update=function(t){this.currentPosition=this.currentPosition.lerp(this.currentPosition,this.nextPosition,.065),this.entity.setPosition(this.currentPosition)};var RewardManager=pc.createScript("rewardManager");RewardManager.attributes.add("keysCounter",{type:"entity"}),RewardManager.attributes.add("coinsCounter",{type:"entity"}),RewardManager.prototype.initialize=function(){this.rewards={keys:0,coins:0},this.updateUI(),this.app.on("task:completed",this.addReward,this)},RewardManager.prototype.addReward=function(e){"key"===e?this.rewards.keys+=1:"coin"===e&&(this.rewards.coins+=1),this.updateUI()},RewardManager.prototype.updateUI=function(){this.keysCounter.element.text=this.rewards.keys,this.coinsCounter.element.text=this.rewards.coins};// ProximityTrigger.js
// var ProximityTrigger = pc.createScript('proximityTrigger');

// // Define multiple triggers with waypoints, buttons, and scene URLs
// ProximityTrigger.attributes.add('triggers', {
//     type: 'json',
//     array: true,
//     schema: [
//         { name: 'button', type: 'entity', title: 'Button' },
//         { name: 'waypoint', type: 'entity', title: 'Waypoint' },
//         { name: 'sceneUrl', type: 'string', title: 'Scene URL' },
//         { name: 'hoverScale', type: 'number', default: 1.1, title: 'Hover Scale' },
//         { name: 'radius', type: 'number', default: 5, title: 'Trigger Radius' }
//     ],
//     title: 'Triggers'
// });

// // Define the player entity
// ProximityTrigger.attributes.add('player', { type: 'entity', title: 'Player' });

// // Fade duration in seconds
// ProximityTrigger.attributes.add('fadeDuration', { type: 'number', default: 1, title: 'Fade Duration' });

// // Initialize the script
// ProximityTrigger.prototype.initialize = function() {
//     this.fadeTimers = {};
//     this.targetOpacities = {};

//     // Initialize each trigger configuration
//     for (var i = 0; i < this.triggers.length; i++) {
//         var config = this.triggers[i];
//         var button = config.button;

//         // Start with the button fully invisible
//         button.enabled = true;
//         button.element.opacity = 0;

//         // Store initial fade states
//         this.targetOpacities[button._guid] = 0;
//         this.fadeTimers[button._guid] = 0;

//         // Find the text element within the button, if any
//         config.textElement = button.findByName('Text');
//         if (config.textElement) {
//             config.textElement.element.opacity = 0;
//         }

//         // Store original button scale for hover effects
//         config.originalScale = button.getLocalScale().clone();

//         // Add hover effects to each button
//         this.setupHoverEffects(button, config);

//         // Add click event listener for loading scenes
//         button.element.on('click', this.onButtonClick.bind(this, config), this);
//     }
// };

// // Update function called every frame
// ProximityTrigger.prototype.update = function(dt) {
//     var playerPos = this.player.getPosition();

//     // Check each trigger's proximity to its respective waypoint
//     for (var i = 0; i < this.triggers.length; i++) {
//         var config = this.triggers[i];
//         var waypointPos = config.waypoint.getPosition();
//         var button = config.button;
//         var distance = playerPos.distance(waypointPos);

//         // Fade in the button if player is within the radius
//         if (distance <= config.radius) {
//             this.targetOpacities[button._guid] = 0.8; // Visible
//         } else {
//             this.targetOpacities[button._guid] = 0; // Invisible
//         }

//         // Smoothly adjust the button opacity based on proximity
//         this.fadeTimers[button._guid] += dt;
//         var fadeProgress = Math.min(this.fadeTimers[button._guid] / this.fadeDuration, 1);
//         button.element.opacity = pc.math.lerp(button.element.opacity, this.targetOpacities[button._guid], fadeProgress);

//         // Smoothly adjust the text element opacity, if applicable
//         if (config.textElement) {
//             config.textElement.element.opacity = pc.math.lerp(config.textElement.element.opacity, this.targetOpacities[button._guid], fadeProgress);
//         }

//         // Enable button interactions when visible
//         button.element.enabled = button.element.opacity > 0.1;

//         // Reset fade timer when opacity reaches the target
//         if (Math.abs(button.element.opacity - this.targetOpacities[button._guid]) < 0.01) {
//             this.fadeTimers[button._guid] = 0;
//         }
//     }
// };

// // Set up hover effects for a button
// ProximityTrigger.prototype.setupHoverEffects = function(button, config) {
//     button.element.on('mouseenter', function() {
//         if (button.element.opacity > 0.1) { // Only apply hover when visible
//             var newScale = config.originalScale.clone().scale(config.hoverScale, config.hoverScale, config.hoverScale);
//             button.setLocalScale(newScale);
//         }
//     }, this);

//     button.element.on('mouseleave', function() {
//         button.setLocalScale(config.originalScale); // Reset scale when hover ends
//     }, this);
// };

// // Handle button click and load the corresponding scene
// ProximityTrigger.prototype.onButtonClick = function(config) {
//     if (config.button.element.opacity > 0.1 && config.sceneUrl) {
//         // Unload the current scene and load the new scene
//         var root = this.app.root;
//         var entities = root.findByTag('persistent');
//         root.children.forEach(function(child) {
//             if (!entities.includes(child)) {
//                 child.destroy();
//             }
//         });

//         // Load the new scene
//         this.app.scenes.loadSceneHierarchy(config.sceneUrl, function (err, entity) {
//             if (err) {
//                 console.error("Failed to load scene:", err);
//             } else {
//                 console.log("Scene loaded successfully:", config.sceneUrl);
//             }
//         });
//     }
// };


var FadeManager=pc.createScript("fadeManager");FadeManager.attributes.add("fadeDuration",{type:"number",default:1,title:"Fade Duration"}),FadeManager.prototype.initialize=function(){this.fadeTimer=0,this.isFadingIn=!0,this.isFadingOut=!1,this.entity.element.opacity=1,this.startFadeIn()},FadeManager.prototype.update=function(t){if(this.isFadingIn){this.fadeTimer+=t;var i=Math.min(this.fadeTimer/this.fadeDuration,1);this.entity.element.opacity=1-i,1===i&&(this.isFadingIn=!1)}else if(this.isFadingOut){this.fadeTimer+=t;i=Math.min(this.fadeTimer/this.fadeDuration,1);this.entity.element.opacity=i,1===i&&(this.isFadingOut=!1)}},FadeManager.prototype.startFadeIn=function(){this.fadeTimer=0,this.isFadingIn=!0,this.isFadingOut=!1},FadeManager.prototype.startFadeOut=function(){this.fadeTimer=0,this.isFadingIn=!1,this.isFadingOut=!0};var DialogTrigger=pc.createScript("dialogTrigger");DialogTrigger.attributes.add("leftDialogBox",{type:"entity"}),DialogTrigger.attributes.add("rightDialogBox",{type:"entity"}),DialogTrigger.attributes.add("player",{type:"entity"}),DialogTrigger.attributes.add("waypointDialogs",{type:"json",array:!0,schema:[{name:"waypoint",type:"string"},{name:"character",type:"string"},{name:"text",type:"string"},{name:"showOnce",type:"boolean",default:!1}]}),DialogTrigger.attributes.add("helpFeatureWaypoint",{type:"string"}),DialogTrigger.attributes.add("helpFeatureUI",{type:"entity"}),DialogTrigger.attributes.add("option1Button",{type:"entity"}),DialogTrigger.attributes.add("option2Button",{type:"entity"}),DialogTrigger.attributes.add("option1Text",{type:"string",default:"Option 1"}),DialogTrigger.attributes.add("option2Text",{type:"string",default:"Option 2"}),DialogTrigger.attributes.add("helpFeatureImage",{type:"entity"}),DialogTrigger.attributes.add("helpFeatureImageText",{type:"string",default:"Help Feature Text"}),DialogTrigger.attributes.add("triggerDistance",{type:"number",default:5}),DialogTrigger.attributes.add("chapter1Complete",{type:"boolean",default:!1}),DialogTrigger.attributes.add("wisdomTree",{type:"entity"}),DialogTrigger.prototype.initialize=function(){this.currentWaypoint=null,this.helpFeatureTriggered=!1,this.leftDialogBox.enabled=!1,this.rightDialogBox.enabled=!1,this.helpFeatureUI.enabled=!1,this.wisdomTree.enabled=!1,this.dialogActive=!1,this.displayedDialogs=new Set,this.showOnceWaypoints=this.waypointDialogs.filter((t=>t.showOnce)).length,this.app.mouse.on(pc.EVENT_MOUSEDOWN,this.onMouseClick,this),this.setupHelpFeatureUI(),this.option1Button.element.on("click",this.onOption1Click,this),this.option2Button.element.on("click",this.onOption2Click,this)},DialogTrigger.prototype.update=function(t){for(var e=0;e<this.waypointDialogs.length;e++){var i=this.app.root.findByName(this.waypointDialogs[e].waypoint);if(i)if(this.player.getPosition().distance(i.getPosition())<=this.triggerDistance){this.waypointDialogs[e].showOnce?this.displayedDialogs.has(this.waypointDialogs[e].text)||(this.showDialog(this.waypointDialogs[e]),this.displayedDialogs.add(this.waypointDialogs[e].text)):this.showDialog(this.waypointDialogs[e]),this.currentWaypoint=i;break}}if(this.displayedDialogs.size===this.showOnceWaypoints&&!this.helpFeatureTriggered){var a=this.app.root.findByName(this.helpFeatureWaypoint);if(a)this.player.getPosition().distance(a.getPosition())<=this.triggerDistance&&this.triggerHelpFeature()}},DialogTrigger.prototype.showDialog=function(t){this.dialogActive=!0,"main"===t.character?(this.leftDialogBox.enabled=!0,this.leftDialogBox.findByName("Text").element.text=t.text):(this.rightDialogBox.enabled=!0,this.rightDialogBox.findByName("Text").element.text=t.text)},DialogTrigger.prototype.onMouseClick=function(){this.dialogActive&&(this.leftDialogBox.enabled=!1,this.rightDialogBox.enabled=!1,this.dialogActive=!1,this.currentWaypoint=null)},DialogTrigger.prototype.triggerHelpFeature=function(){this.helpFeatureTriggered||(this.helpFeatureUI.enabled=!0,this.helpFeatureTriggered=!0,this.app.fire("helpFeatureTriggered"))},DialogTrigger.prototype.setupHelpFeatureUI=function(){this.option1Button.findByName("Text").element.text=this.option1Text,this.option2Button.findByName("Text").element.text=this.option2Text,this.helpFeatureImage.findByName("Text").element.text=this.helpFeatureImageText},DialogTrigger.prototype.onOption1Click=function(){console.log("Option 1 selected"),this.helpFeatureUI.enabled=!1,this.chapter1Complete=!0,this.app.fire("chapter1Complete"),this.wisdomTree&&(this.wisdomTree.enabled=!0,console.log("WisdomTree appeared in the scene!"))},DialogTrigger.prototype.onOption2Click=function(){console.log("Option 2 selected"),this.helpFeatureImage.findByName("Text").element.text="Think & Choose wisely, It's a rabbit!!"};var Pet=pc.createScript("pet");Pet.attributes.add("speed",{type:"number",default:.05}),Pet.attributes.add("characterEntity",{type:"entity"}),Pet.attributes.add("offset",{type:"vec3",default:[1,0,1]}),Pet.prototype.initialize=function(){this.nextPosition=new pc.Vec3(-10.123,0,19.826),this.isMoving=!1,this.footstepPlaying=!1,this.chapter1Complete=!1,this.helpFeatureTriggered=!1,this.app.on("chapter1Complete",this.onChapter1Complete,this),this.app.on("helpFeatureTriggered",this.onHelpFeatureTriggered,this),this.app.on("Player:Move",this.setMovePoint,this)},Pet.prototype.onChapter1Complete=function(){this.chapter1Complete=!0,this.checkIfCanMove()},Pet.prototype.onHelpFeatureTriggered=function(){this.helpFeatureTriggered=!0,this.checkIfCanMove()},Pet.prototype.checkIfCanMove=function(){this.chapter1Complete&&this.helpFeatureTriggered&&(this.canMove=!0)},Pet.prototype.setMovePoint=function(t){if(this.canMove){var e=t.clone().add(this.offset);this.entity.lookAt(e),this.nextPosition.copy(e)}},Pet.prototype.update=function(t){this.canMove&&(this.entity.getPosition().clone().sub(this.nextPosition).length()>.1?(this.entity.translateLocal(0,0,-this.speed),this.characterEntity.anim.setFloat("Distance",1),this.isMoving=!0):(this.characterEntity.anim.setFloat("Distance",0),this.isMoving=!1),this.isMoving&&!this.footstepPlaying?this.footstepPlaying=!0:!this.isMoving&&this.footstepPlaying&&(this.footstepPlaying=!1))};var DialogTrigger2=pc.createScript("dialogTrigger2");DialogTrigger2.attributes.add("leftDialogBox",{type:"entity"}),DialogTrigger2.attributes.add("rightDialogBox",{type:"entity"}),DialogTrigger2.attributes.add("player",{type:"entity"}),DialogTrigger2.attributes.add("waypointDialogs",{type:"json",array:!0,schema:[{name:"waypoint",type:"string"},{name:"character",type:"string"},{name:"text",type:"string"},{name:"showOnce",type:"boolean",default:!1}]}),DialogTrigger2.attributes.add("triggerDistance",{type:"number",default:5}),DialogTrigger2.prototype.initialize=function(){this.currentWaypoint=null,this.leftDialogBox.enabled=!1,this.rightDialogBox.enabled=!1,this.dialogActive=!1,this.displayedDialogs=new Set,this.showOnceWaypoints=this.waypointDialogs.filter((t=>t.showOnce)).length,this.app.mouse.on(pc.EVENT_MOUSEDOWN,this.onMouseClick,this),this.chapter1Complete=!1,this.app.on("chapter1Complete",this.onChapter1Complete,this)},DialogTrigger2.prototype.onChapter1Complete=function(){this.chapter1Complete=!0},DialogTrigger2.prototype.update=function(t){if(this.chapter1Complete)for(var i=0;i<this.waypointDialogs.length;i++){var e=this.app.root.findByName(this.waypointDialogs[i].waypoint);if(e)if(this.player.getPosition().distance(e.getPosition())<=this.triggerDistance){this.waypointDialogs[i].showOnce?this.displayedDialogs.has(this.waypointDialogs[i].text)||(this.showDialog(this.waypointDialogs[i]),this.displayedDialogs.add(this.waypointDialogs[i].text)):this.showDialog(this.waypointDialogs[i]),this.currentWaypoint=e;break}}},DialogTrigger2.prototype.showDialog=function(t){this.dialogActive=!0,"main"===t.character?(this.leftDialogBox.enabled=!0,this.leftDialogBox.findByName("Text").element.text=t.text):(this.rightDialogBox.enabled=!0,this.rightDialogBox.findByName("Text").element.text=t.text)},DialogTrigger2.prototype.onMouseClick=function(){this.dialogActive&&(this.leftDialogBox.enabled=!1,this.rightDialogBox.enabled=!1,this.dialogActive=!1,this.currentWaypoint=null)};var QuizManager=pc.createScript("quizManager");QuizManager.attributes.add("quizContainer",{type:"entity",title:"Quiz Container"}),QuizManager.attributes.add("questionText",{type:"entity",title:"Question Text"}),QuizManager.attributes.add("optionButtons",{type:"entity",array:!0,title:"Option Buttons"}),QuizManager.attributes.add("optionButtonTexts",{type:"entity",array:!0,title:"Option Button Texts"}),QuizManager.attributes.add("startButton",{type:"entity",title:"Start Button"}),QuizManager.attributes.add("playerEntity",{type:"entity",title:"Player Entity"}),QuizManager.attributes.add("wisdomTreeEntity",{type:"entity",title:"Wisdom Tree Entity"}),QuizManager.attributes.add("triggerArea",{type:"entity",title:"Trigger Area"}),QuizManager.attributes.add("feedbackContainer",{type:"entity",title:"Feedback Container"}),QuizManager.attributes.add("feedbackText",{type:"entity",title:"Feedback Text"}),QuizManager.prototype.initialize=function(){this.questions=[],this.quizActive=!1,this.startButton.enabled=!1,this.app.on("subject:set",this.onSubjectSet,this),this.quizContainer&&(this.quizContainer.enabled=!1),this.feedbackContainer&&(this.feedbackContainer.enabled=!1),this.startButton&&this.startButton.element?this.startButton.element.on("click",this.startQuiz.bind(this)):console.warn("Start Button is missing or does not have an Element component."),this.updateStartButtonState()},QuizManager.prototype.updateStartButtonState=function(){this.wisdomTreeEntity.enabled&&this.checkPlayerProximityToTrigger(),setTimeout(this.updateStartButtonState.bind(this),100)},QuizManager.prototype.checkPlayerProximityToTrigger=function(){var t=this.triggerArea.getPosition(),e=this.playerEntity.getPosition();t.distance(e)<5?this.startButton&&this.startButton.element&&(this.startButton.enabled=!0,this.startButton.element.enabled=!0):this.startButton&&this.startButton.element&&(this.startButton.enabled=!1,this.startButton.element.enabled=!1)},QuizManager.prototype.onSubjectSet=function(t){console.log("Subject set to:",t);const e={questions:[{text:"What is the capital of France?",options:[{id:1,text:"Berlin"},{id:2,text:"Paris"},{id:3,text:"Rome"}],correctOptionId:2},{text:"What is 2 + 2?",options:[{id:1,text:"3"},{id:2,text:"4"},{id:3,text:"5"}],correctOptionId:2}]};let i;const n=sessionStorage.getItem("quizQuestions");if(n)try{i=JSON.parse(n),Array.isArray(i.questions)||(console.warn("Session questions are not in the expected format. Falling back to default."),i=e)}catch(t){console.error("Failed to parse session questions:",t),i=e}else console.log("No session questions found. Using default."),i=e;this.questions=i.questions,Array.isArray(this.questions)&&this.questions.length>0?console.log(t+" questions loaded successfully:",this.questions):console.error(t+" questions data is empty or invalid!")},QuizManager.prototype.startQuiz=function(){if(this.questions&&0!==this.questions.length){this.quizActive=!0,this.quizContainer.enabled=!0,this.startButton&&(this.startButton.enabled=!1);var t=Math.floor(Math.random()*this.questions.length),e=this.questions[t];e&&e.text&&e.options?this.displayQuestion(e):(console.error("Invalid question data:",e),this.endQuiz())}else console.error("No questions available to start the quiz!")},QuizManager.prototype.displayQuestion=function(t){console.log("Displaying question:",t),this.questionText&&(this.questionText.element.text=t.text),t.options.forEach(((e,i)=>{this.optionButtonTexts[i]&&this.optionButtonTexts[i].element&&(this.optionButtonTexts[i].element.text=e.text),this.optionButtons[i]&&this.optionButtons[i].element&&(this.optionButtons[i].enabled=!0,this.optionButtons[i].element.off("click"),this.optionButtons[i].element.on("click",(()=>{console.log("Button "+i+" clicked"),this.checkAnswer(e.id,t)})))}))},QuizManager.prototype.checkAnswer=function(t,e){console.log("Checking answer, selectedOptionId: "+t);var i="";t===e.correctOptionId?(i="You chose the right one! Here's your reward.",!0,this.app.fire("task:completed","coin")):i="Sorry, better luck next time.",console.log("Feedback Text:",i),this.showFeedback(i),this.optionButtons.forEach((t=>{t&&(t.enabled=!1)})),this.endQuiz()},QuizManager.prototype.showFeedback=function(t){console.log("Displaying feedback:",t),this.feedbackContainer&&(this.feedbackContainer.enabled=!0),this.feedbackText&&this.feedbackText.element&&(this.feedbackText.element.text=t),setTimeout((()=>{this.feedbackContainer&&(this.feedbackContainer.enabled=!1)}),3e3)},QuizManager.prototype.endQuiz=function(){console.log("Quiz finished!"),this.quizActive=!1,this.quizContainer&&(this.quizContainer.enabled=!1),this.startButton&&(this.startButton.enabled=!0)};var SubjectManager=pc.createScript("subjectManager");SubjectManager.prototype.initialize=function(){this.subject="Physics",this.app.fire("subject:set",this.subject),this.checkSubjectInterval=setInterval(this.checkSubject.bind(this),3e3)},SubjectManager.prototype.checkSubject=function(){var t=sessionStorage.getItem("subject");t&&t!==this.subject&&(console.log("Subject updated to:",t),this.subject=t,this.app.fire("subject:set",this.subject))},SubjectManager.prototype.destroy=function(){clearInterval(this.checkSubjectInterval)};var WordGuessManager=pc.createScript("wordGuessManager");WordGuessManager.attributes.add("gameContainer",{type:"entity",title:"Game Container"}),WordGuessManager.attributes.add("hintText",{type:"entity",title:"Hint Text"}),WordGuessManager.attributes.add("inputField",{type:"entity",title:"Input Field"}),WordGuessManager.attributes.add("submitButton",{type:"entity",title:"Submit Button"}),WordGuessManager.attributes.add("startButton",{type:"entity",title:"Start Button"}),WordGuessManager.attributes.add("playerEntity",{type:"entity",title:"Player Entity"}),WordGuessManager.attributes.add("triggerArea",{type:"entity",title:"Trigger Area"}),WordGuessManager.attributes.add("feedbackContainer",{type:"entity",title:"Feedback Container"}),WordGuessManager.attributes.add("feedbackText",{type:"entity",title:"Feedback Text"}),WordGuessManager.prototype.initialize=function(){this.words=[],this.currentWord=null,this.gameActive=!1,this.app.on("subject:set",this.onSubjectSet,this),this.gameContainer&&(this.gameContainer.enabled=!1),this.feedbackContainer&&(this.feedbackContainer.enabled=!1),this.startButton&&this.startButton.element?this.startButton.element.on("click",this.startGame.bind(this)):console.warn("Start Button is missing or does not have an Element component."),this.submitButton&&this.submitButton.element?this.submitButton.element.on("click",this.checkWord.bind(this)):console.warn("Submit Button is missing or does not have an Element component."),this.updateStartButtonState()},WordGuessManager.prototype.updateStartButtonState=function(){this.checkPlayerProximityToTrigger(),setTimeout(this.updateStartButtonState.bind(this),100)},WordGuessManager.prototype.checkPlayerProximityToTrigger=function(){var t=this.triggerArea.getPosition(),e=this.playerEntity.getPosition(),s=t.distance(e);s<5&&!this.startButton.enabled?(this.startButton.enabled=!0,this.startButton.element.enabled=!0):s>=5&&this.startButton.enabled&&(this.startButton.enabled=!1,this.startButton.element.enabled=!1)},WordGuessManager.prototype.onSubjectSet=function(t){console.log("Subject set to:",t);var e="";switch(t.toLowerCase()){case"physics":e="phywords.json";break;case"chemistry":e="chemwords.json";break;case"maths":e="matwords.json";break;default:return void console.error("Unknown subject:",t)}var s=this.app.assets.find(e,"json");s?(s.ready(function(){this.words=s.resource.words,Array.isArray(this.words)&&this.words.length>0?(console.log(t+" words loaded successfully:",this.words),console.log(t+" words:",this.words)):console.error(t+" words data is empty or invalid!")}.bind(this)),this.app.assets.load(s)):console.error(e+" not found!")},WordGuessManager.prototype.startGame=function(){if(this.words&&0!==this.words.length){this.gameActive=!0,this.gameContainer.enabled=!0,this.startButton&&(this.startButton.enabled=!1);var t=Math.floor(Math.random()*this.words.length);this.currentWord=this.words[t],this.currentWord&&this.currentWord.hint?this.displayHint(this.currentWord.hint):(console.error("Invalid word data:",this.currentWord),this.endGame())}else console.error("No words available to start the game!")},WordGuessManager.prototype.displayHint=function(t){this.hintText&&this.hintText.element&&(this.hintText.element.text=t)},WordGuessManager.prototype.checkWord=function(){(this.inputField&&this.inputField.element?this.inputField.element.text:"").toLowerCase()===this.currentWord.word.toLowerCase()?this.showFeedback("Correct! Well done!"):this.showFeedback("Incorrect. Try again!"),this.endGame()},WordGuessManager.prototype.showFeedback=function(t){this.feedbackContainer&&(this.feedbackContainer.enabled=!0),this.feedbackText&&this.feedbackText.element&&(this.feedbackText.element.text=t),setTimeout((()=>{this.feedbackContainer&&(this.feedbackContainer.enabled=!1)}),3e3)},WordGuessManager.prototype.endGame=function(){console.log("Game finished!"),this.gameActive=!1,this.gameContainer&&(this.gameContainer.enabled=!1),this.startButton&&(this.startButton.enabled=!0)};